<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20121220</FitNesseVersion>
  <rootPath>RowFixture</rootPath>
    <result>
    <counts>
      <right>71</right>
      <wrong>8</wrong>
      <ignores>0</ignores>
      <exceptions>0</exceptions>
    </counts>
    <runTimeInMillis>37</runTimeInMillis>
    <content><![CDATA[<h1>Checking Query Results Using RowFixture</h1>
This style of test table is best for checking the results of queries. For the sake of discussion, let's call each of the items that you get back from a query a <b>record</b>. A <a href="FitNesse.UserGuide.RowFixture">RowFixture</a> lets you test that you get back <b>exactly the set of records</b> from a query that you expect to get.<br/><br/>Here is a simplistic example. Let's say that we have asked our application for the first five prime numbers.  We want to make sure we got them all.<br/><br/><table>
	<tr>
		<td>fitnesse.fixtures.PrimeNumberRowFixture</td>
	</tr>
	<tr>
		<td>prime</td>
	</tr>
	<tr>
		<td class="pass">3</td>
	</tr>
	<tr>
		<td class="pass">2</td>
	</tr>
	<tr>
		<td class="pass">5</td>
	</tr>
	<tr>
		<td class="pass">7</td>
	</tr>
	<tr>
		<td class="pass">11</td>
	</tr>
</table>
<br/>This test table style does not read the way that a <a href="FitNesse.UserGuide.ColumnFixture">ColumnFixture</a> style test table does. In this case, each cell in the <i>prime</i> column represents a <b>key</b> that identifies one of the records we expect to get back (in this case, a prime number). And <b>the entire set of rows of data</b> represent the output we expect to get back: no more and no less than that <b>exact set of records</b> (though they need not be in that exact order).<br/><br/>Hit the test button to run this test. OK, we got them all. For an explanation of the fixture code for this <a href="FitNesse.UserGuide.RowFixture">RowFixture</a> example, see <a href="FitNesse.UserGuide.RowFixtureCode">RowFixtureCode</a>.<br/><br/><h2>Missing Records</h2>
The following table shows what happens when you ask for a record that doesn't exist. <i>(Note the extra 12.</i>)<br/><br/><table>
	<tr>
		<td>fitnesse.fixtures.PrimeNumberRowFixture</td>
	</tr>
	<tr>
		<td>prime</td>
	</tr>
	<tr>
		<td class="pass">2</td>
	</tr>
	<tr>
		<td class="pass">3</td>
	</tr>
	<tr>
		<td class="pass">5</td>
	</tr>
	<tr>
		<td class="pass">7</td>
	</tr>
	<tr>
		<td class="pass">11</td>
	</tr>
	<tr>
		<td class="fail">12 <span class="fit_label">missing</span></td>
	</tr>
</table>
<br/><h2>Surplus Records</h2>
And this table shows what happens when you don't ask for a record that <i>is</i> in the query results.  <i>(Note the 11 is missing.)</i><br/><br/><table>
	<tr>
		<td>fitnesse.fixtures.PrimeNumberRowFixture</td>
	</tr>
	<tr>
		<td>prime</td>
	</tr>
	<tr>
		<td class="pass">2</td>
	</tr>
	<tr>
		<td class="pass">3</td>
	</tr>
	<tr>
		<td class="pass">5</td>
	</tr>
	<tr>
		<td class="pass">7</td>
	</tr>
<tr>
<td class="fail"> <span class="fit_grey">11</span> <span class="fit_label">surplus</span></td></tr></table>
<br/><h2>Testing Fields in Returned Records</h2>
Often you want to see that you got a specific set of records back, <b>and</b>  you want to <b>test certain fields in the returned records</b>. For this you use the same question-mark syntax we saw used for output columns in <a href="FitNesse.UserGuide.ColumnFixture">ColumnFixture</a> style tables.<br/><br/>For example, lets say that we have a database of employee records.  We want to test that the employees were paid correctly. The <i>pay?</i> column in the table below specifies the exact amount we expect to get back for the pay field of each returned employee record:<br/><br/><table>
	<tr>
		<td colspan="2">fitnesse.fixtures.EmployeePayRecordsRowFixture</td>
	</tr>
	<tr>
		<td>id</td>
		<td>pay?</td>
	</tr>
	<tr>
		<td class="pass">1</td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">2</td>
		<td class="pass">2000</td>
	</tr>
</table>
<br/><h3>Incorrect Output</h3>
Here's what it would look like if the pay was not correct for the employee whose id is 2. It looks just as it does for incorrect output values in a <a href="FitNesse.UserGuide.ColumnFixture">ColumnFixture</a> table cell:<br/><br/><table>
	<tr>
		<td colspan="2">fitnesse.fixtures.EmployeePayRecordsRowFixture</td>
	</tr>
	<tr>
		<td>id</td>
		<td>pay?</td>
	</tr>
	<tr>
		<td class="pass">1</td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">2</td>
		<td class="fail">3000 <span class="fit_label">expected</span><hr>2000.0 <span class="fit_label">actual</span></td>
	</tr>
</table>
<br/><h3>Missing or Extra Records</h3>
And regardless whether you check aspects of queried records, <a href="FitNesse.UserGuide.FitNesse">FitNesse</a> shows you whether any are missing or extra:<br/><br/><table>
	<tr>
		<td colspan="2">fitnesse.fixtures.EmployeePayRecordsRowFixture</td>
	</tr>
	<tr>
		<td>id</td>
		<td>pay()</td>
	</tr>
	<tr>
		<td class="pass">1</td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="fail">5 <span class="fit_label">missing</span></td>
		<td>5000</td>
	</tr>
<tr>
<td class="fail"> <span class="fit_grey">2</span> <span class="fit_label">surplus</span></td>
<td> <span class="fit_grey">2000.0</span></td></tr></table>
<br/>To see the fixture code for these tables, see <a href="FitNesse.UserGuide.RowFixtureCode">RowFixtureCode</a>.<br/><br/><h2>Querying Using Multiple "Keys"</h2>
Sometimes we need more than one piece of data to uniquely identify a record.<br/><br/>Suppose we have records for the last three months' worth of paychecks.  Each paycheck is uniquely identified by the <i>employeeId</i> and the <i>date</i>.  We want to make sure that the checks were generated properly. We use a <a href="FitNesse.UserGuide.RowFixture">RowFixture</a> table to ask for a set of checks identified by both <i>employeeId</i> <b>and</b> <i>date</i>:<br/><br/><table>
	<tr>
		<td colspan="4">fitnesse.fixtures.PayCheckRecordFixture</td>
	</tr>
	<tr>
		<td>date</td>
		<td>employeeId</td>
		<td>name</td>
		<td>pay()</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">2</td>
		<td> <span class="fit_grey">Bill</span></td>
		<td class="pass">2002</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1015</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">2</td>
		<td> <span class="fit_grey">Bill</span></td>
		<td class="pass">2003</td>
	</tr>
</table>
<br/>Notice, once again, that the order of the table rows doesn't matter.  For example, this table also works fine for that same query:<br/><br/><table>
	<tr>
		<td colspan="4">fitnesse.fixtures.PayCheckRecordFixture</td>
	</tr>
	<tr>
		<td>date</td>
		<td>employeeId</td>
		<td>name</td>
		<td>pay()</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1015</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">2</td>
		<td> <span class="fit_grey">Bill</span></td>
		<td class="pass">2003</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">2</td>
		<td> <span class="fit_grey">Bill</span></td>
		<td class="pass">2002</td>
	</tr>
</table>
<br/><h3>Blank Fields</h3>
Notice the <i>name</i> field. We provided the field name, knowing that it was part of each record, but we provided no expected values in that column. As a result, <a href="FitNesse.UserGuide.FitNesse">FitNesse</a> did not make this field part of the key for finding records, but merely filled in the values found for that field in each record, so we could see them. Here's what would have happened if we filled in the <i>name</i> column correctly for some cells, and incorrectly for another.<br/><br/><table>
	<tr>
		<td colspan="4">fitnesse.fixtures.PayCheckRecordFixture</td>
	</tr>
	<tr>
		<td>date</td>
		<td>employeeId</td>
		<td>name</td>
		<td>pay()</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">1</td>
		<td class="pass">Bob</td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">1</td>
		<td class="pass">Bob</td>
		<td class="pass">1015</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">2</td>
		<td class="pass">Bill</td>
		<td class="pass">2002</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">2</td>
		<td class="fail">Biff <span class="fit_label">expected</span><hr>Bill <span class="fit_label">actual</span></td>
		<td class="pass">2003</td>
	</tr>
</table>
<br/>And here's what would happen if a row were missing or surplus.<br/><br/><table>
	<tr>
		<td colspan="4">fitnesse.fixtures.PayCheckRecordFixture</td>
	</tr>
	<tr>
		<td>date</td>
		<td>employeeId</td>
		<td>name</td>
		<td>pay()</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1000</td>
	</tr>
	<tr>
		<td class="pass">4/1/03</td>
		<td class="pass">1</td>
		<td> <span class="fit_grey">Bob</span></td>
		<td class="pass">1015</td>
	</tr>
	<tr>
		<td class="pass">3/1/03</td>
		<td class="pass">2</td>
		<td> <span class="fit_grey">Bill</span></td>
		<td class="pass">2002</td>
	</tr>
	<tr>
		<td class="fail">4/1/03 <span class="fit_label">missing</span></td>
		<td>3</td>
		<td></td>
		<td>2003</td>
	</tr>
<tr>
<td class="fail"> <span class="fit_grey">4/1/03</span> <span class="fit_label">surplus</span></td>
<td> <span class="fit_grey">2</span></td>
<td> <span class="fit_grey">Bill</span></td>
<td> <span class="fit_grey">2003.0</span></td></tr></table>
<br/><h2>Summary</h2>
<ul>
	<li><a href="FitNesse.UserGuide.RowFixture">RowFixture</a> tables are designed for checking that you get back exactly the set of records you want from a query.</li>
	<li><a href="FitNesse.UserGuide.FitNesse">FitNesse</a> will cause the test to fail if the query had any <b>missing</b> or <b>surplus</b> records.</li>
	<li>You can also test fields in the returned records.</li>
	<li>If you provide a field name column, but provide no expected values for it, then <a href="FitNesse.UserGuide.FitNesse">FitNesse</a> will fill in the returned values so you can see them.</li>
</ul>
<br/><h2>Learning More</h2>
To learn about the fixture code for the above examples, see <a href="FitNesse.UserGuide.RowFixtureCode">RowFixtureCode</a>.<br/>Also check out the other <a href="FitNesse.UserGuide.TestTableStyles">TestTableStyles</a>.<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>]]></content>
    <relativePageName>RowFixture</relativePageName>
    
    
    
  </result>
  
    <finalCounts>
    <right>0</right>
    <wrong>0</wrong>
    <ignores>0</ignores>
    <exceptions>0</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>0</totalRunTimeInMillis>
  
</testResults>

